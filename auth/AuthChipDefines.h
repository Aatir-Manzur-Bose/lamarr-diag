////////////////////////////////////////////////////////////////////////////////
/// @file   AuthChipDefines.h
/// @brief  Holds information about the Apple Authentication Chip, but NOT any that's
///         specific to how it's implemented in Shelby; those are in AuthChipDevice.h
/// @author dv15727
/// @date   2014
///
/// @attention
///    BOSE CORPORATION.
///    This program may not be reproduced, in whole or in part in any
///    form or any means whatsoever without the written permission of:
///        BOSE CORPORATION
///        The Mountain,
///        Framingham, MA 01701-9168
///
///////////////////////////////////////////////////////////////////////////////////

#ifndef __AuthChipDefines_h__
#define __AuthChipDefines_h__

#include <string>
#include <inttypes.h>

#define kMFiAuthBusAddressLow                       0x10   // this is the 7-bit address when RST is held low while the chip VCC is applied 
#define kMFiAuthBusAddressHigh                      0x11   // this is the 7-bit address when RST is high while the chip VCC is applied 

#define kMFiAuthRetryDelayuS                    5000 // 5 ms.
#define kMFiAuthRetryDelaymS                    (kMFiAuthRetryDelayuS / 1000)

// BEGINNING of a Sequentially-Readable block of Registers  // length, Access; contents after reset
#define kMFiAuthReg_DeviceVersion                   0x00    // 1 byte, ro; 0x05
#define kMFiAuthReg_DeviceVersion_Value                     0x05
#define kMFiAuthReg_FirmwareVersion                 0x01    // 1 byte, ro; 0x01
#define kMFiAuthReg_FirmwareVersion_Value                   0x01
#define kMFiAuthReg_ProtocolMajorVersion            0x02    // 1 byte, ro; 0x02
#define kMFiAuthReg_ProtocolMajorVersion_value              0x02
#define kMFiAuthReg_ProtocolMinorVersion            0x03    // 1 byte, ro; 0x00
#define kMFiAuthReg_ProtocolMinorVersion_Value              0x00
#define kMFiAuthReg_DeviceID                        0x04    // 4 bytes, ro; 0x00.00.02.00
#define kMFiAuthReg_DeviceID_Value                          0x00000200
#define kMFiAuthReg_ErrorCode                       0x05    // 1 byte, ro; !!CLEARED ON READ!!
#define kMFiAuthErrorCode_NoError                           0x00
#define kMFiAuthErrorCode_InvalidReadRegister               0x01
#define kMFiAuthErrorCode_InvalidWriteRegister              0x02
#define kMFiAuthErrorCode_InvalidSigLen                     0x03
#define kMFiAuthErrorCode_InvalidChallengeLen               0x04
#define kMFiAuthErrorCode_InvalidCertLen                    0x05
#define kMFiAuthErrorCode_SigGenProcErr                     0x06
#define kMFiAuthErrorCode_ChallengeGenProcErr               0x07
#define kMFiAuthErrorCode_SigVerifProcErr                   0x08
#define kMFiAuthErrorCode_CertValidationProcErr             0x09
#define kMFiAuthErrorCode_InvalidProcessControl             0x0A
#define kMFiAuthErrorCode_ProcCtrlOutOfSequence             0x0B
// Holds current value of CP's "event counter", which auto-decrements once per second.
// Power should not be removed from the CP until this counter has decremented to zero.
#define kMFiAuthReg_SystemEventCounter              0x4D    // 1, ro; undefined
// END of a Sequentially-Readable block of Registers

// BEGINNING of a Sequentially-Readable block of Registers  // length, Access; contents after reset
#define kMFiAuthReg_Control_Status                  0x10    // 1 byte, ro; 0x00
// ON READ OF REGISTER: (provides the status of the most recently requested CP process)
#define kMFiAuthStatus_ErrorSet_Mask                    0x80    // bit 7
#define kMFiAuthStatus_ErrorSet_RightShift              7
// means "the error code register contains the most recent process or communication
// error. Both this bit & the Error Code Register are cleared after the Error Code
// Register is read. This bit is also cleared after every successful command execution."
#define kMFiAuthStatus_ErrorCodeRegister_UpToDate           1
// means " the error code register does not contain a code generated by the most recent
// command execution. However, it may still contain the most recent error code (> 0x00)
// generated by an earlier comand."
#define kMFiAuthStatus_ErrorCodeRegister_Stale              0

#define kMFiAuthStatus_ProcessResults_Mask              0x70    // bits 6-4
#define kMFiAuthStatus_ProcessResults_RightShift        4
// AuthProcResults values are after masking and shifting right
#define kMFiAuthStatus_ProcResults_NoValidResult            0x00
#define kMFiAuthStatus_ProcResults_AccessoryDevSigGenerated 0x01
#define kMFiAuthStatus_ProcResults_ChallengeGenerated       0x02
#define kMFiAuthStatus_ProcResults_AppleDevSigGenerated     0x03
#define kMFiAuthStatus_ProcResults_AppleDevCertValidated    0x04
// ON WRITE TO REGISTER: (controls the start of CP processes)
#define kMFiAuthControl_ProcessControl_Mask             0x07    // bits 2-0
#define kMFiAuthControl_ProcessControl_RightShift       0
#define kMFiAuthControl_NoOperation                         0   // always reports success-ERR_SET=0,PROC_RESULTS=0
#define kMFiAuthControl_GenerateSignature                   1
#define kMFiAuthControl_GenerateChallenge                   2
#define kMFiAuthControl_VerifySignature                     3
#define kMFiAuthControl_ValidateCertificate                 4
#define kMFiAuthControl_NoOperation2                        5   // always reports success-ERR_SET=0,PROC_RESULTS=0
// BEGINNING of a Sequentially-WRITEABLE block of Registers
// Set this to 0x80 (max. size) BEFORE Signature Generation; it will be update to actual signature size
// Set this to actual Signature length BEFORE Signature Verification begins
#define kMFiAuthReg_SignatureSize                   0x11    // 2 bytes, rw; 128
#define kMFiAuthReg_SignatureData                   0x12    // 128 bytes, rw; undefined
// ENDING of a Sequentially-WRITEABLE block of Registers
// END of a Sequentially-Readable block of Registers

// BEGINNING of a Sequentially-Readable block of Registers  // length, Access; contents after reset
// Set this to actual Challenge length BEFORE Signature Generation begins
// Set this to the requested Challenge length BEFORE Challenge Generation begins (1 to 128)
// An Authentication Challenge must be 20 bytes in length.
#define kMFiAuthReg_ChallengeSize                   0x20    // 2 bytes, rw; 20
#define kMFiAuthReg_RequiredChallengeLength         20
#define kMFiAuthReg_ChallengeData                   0x21    // 128 bytes, rw; undefined
// END of a Sequentially-Readable block of Registers

// BEGINNING of a Sequentially-Readable block of Registers      // length, Access; contents after reset
// Holds the length of the PKCS#7-wrapped X.509 certificate used by the Apple device to authenticate an Accessory.
// Its value will be 1280 (bytes) or less. Multiple 128-byte "pages" may be read sequentially
// in order to read in entire Certificate (which is UP TO 1280 bytes long).
#define kMFiAuthReg_AccessoryDeviceCertificateSize      0x30    // 2 bytes, ro; <= 1280
// Holds the data of the PKCS#7-wrapped X.509 certificate used by the Apple device to authenticate an Accessory.
// The size register determines which "pages" of data to read (always starting with page 1).
#define kMFiAuthReg_AccessoryDeviceCertificateData1     0x31    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData2     0x32    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData3     0x33    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData4     0x34    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData5     0x35    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData6     0x36    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData7     0x37    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData8     0x38    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData9     0x39    // 128 bytes, ro; Certificate
#define kMFiAuthReg_AccessoryDeviceCertificateData10    0x3A    // 128 bytes, ro; Certificate
// END of a Sequentially-Readable block of Registers

#define kMFiAuthReg_SelfTest_Control_Status             0x40    // 1, rw; 0x00
// ON WRITE TO REGISTER: (controls the built-in self-test functions of CP processes)
#define kMFiAuthSelfTestControl_ProcessControl_Mask         0x07    // bits 2-0
#define kMFiAuthSelfTestControl_ProcessControl_RightShift   0
#define kMFiAuthSelfTestControl_NoOperation                 0
// Runs X.509 certificate and private key tests. NOTE THAT these tests ONLY verify that
// the elements are present in Flash memory;no authentication is performed.
#define kMFiAuthSelfTestControl_RunTests                    1
// ON READ OF REGISTER: (reports status the built-in self-test functions of CP processes)
// Reading this Register clears it to 0x00
#define kMFiAuthSelfTestStatus_CertificateNotFound          0x80
#define kMFiAuthSelfTestStatus_PrivateKeyNotFound           0x40

// BEGINNING of a Sequentially-Readable block of Registers      // length, Access; contents after reset
// Holds the length of the X.509 certificate supplied by the attached Apple device, which an
// Accessory used to authenticate an Apple device in both the Certificate Validation & Signature
// Verification processes. Its value will be 1024 (bytes) or less.
// Writing a value > 0 && <= 1024 causes the CP to validate the data in the data registers.
// If the CP invalidates the iPod Certificate Data, it sets this register to 0 (zero).
#define kMFiAuthReg_AppleDeviceCertificateSize          0x50    // 2 bytes, rw; 0x0000
// Holds the data of the X.509 certificate used by the Accessory to authenticate an Apple device
// in both the Certificate Validation & Signature Verification processes.
// The size register determines which "pages" of data to write (always starting with page 1).
// Only individual 128-byte "pages" may be written to.
#define kMFiAuthReg_AppleDeviceCertificateData1         0x51    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData2         0x52    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData3         0x53    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData4         0x54    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData5         0x55    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData6         0x56    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData7         0x57    // 128 bytes, rw; undefined
#define kMFiAuthReg_AppleDeviceCertificateData8         0x58    // 128 bytes, rw; undefined
// END of a Sequentially-Readable block of Registers

#endif // __AuthChipDefines_h__
